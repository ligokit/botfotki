import logging
import aiohttp
import asyncio
import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ SFW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
SFW_CATEGORIES = [
    "waifu", "neko", "shinobu", "megumin", "bully", "cuddle", "cry", 
    "hug", "awoo", "kiss", "lick", "pat", "smug", "bonk", "yeet", 
    "blush", "smile", "wave", "highfive", "handhold", "nom", "bite", 
    "glomp", "slap", "happy", "wink", "poke", "dance", "cringe"
]

# NSFW –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ API (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ)

NSFW_CATEGORIES = {
    "waifupics": ["waifu", "neko", "trap", "blowjob"],
    "nekoslife": ["lewd", "pussy", "cum", "spank", "boobs", "anal", "hentai", "femdom", "classic", "feet"],
    # "nekosbest": ["neko", "kitsune", "husbando", "waifu"],
    "waifuim": ["maid", "uniform", "marin-kitagawa", "mori-calliope", "raiden-shogun", "oppai", "selfies", 
               "ass", "hentai", "milf", "oral", "paizuri", "ecchi"]
}

# NSFW_CATEGORIES = {
    # "waifupics": ["waifu", "neko", "trap", "blowjob"],
    # "nekoslife": ["lewd", "spank"],  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # "waifuim": ["ass", "hentai", "milf", "oral", "paizuri", "ecchi"]
# }

# –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ API —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
API_TIMEOUT = {
    "waifupics": 10,   # –°–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π API
    "nekoslife": 5,    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    "waifuim": 7       # –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å waifu.pics
async def get_waifu_pics_image(category, nsfw=False):
    endpoint = "nsfw" if nsfw else "sfw"
    url = f"https://api.waifu.pics/{endpoint}/{category}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ waifu.pics: {url}")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=API_TIMEOUT["waifupics"]) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("url")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ waifu.pics API: {str(e)}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å nekos.life
async def get_nekos_life_image(category):
    url = f"https://nekos.life/api/v2/img/{category}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ nekos.life: {url}")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=API_TIMEOUT["nekoslife"]) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("url")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ nekos.life API: {str(e)}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å waifu.im
async def get_waifu_im_image(category, nsfw=True):
    is_nsfw = "true" if nsfw else "false"
    url = f"https://api.waifu.im/search"
    params = {"included_tags": category, "is_nsfw": is_nsfw}
    headers = {"Accept": "application/json"}
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ waifu.im: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params, headers=headers, timeout=API_TIMEOUT["waifuim"]) as response:
                if response.status == 200:
                    data = await response.json()
                    if "images" in data and len(data["images"]) > 0:
                        return data["images"][0].get("url")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ waifu.im API: {str(e)}")
    return None

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def get_image(api, category, nsfw=False, max_retries=2):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: API={api}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category}, NSFW={nsfw}")
    
    for retry in range(max_retries):
        if retry > 0:
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry}/{max_retries}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API
        if api == "waifupics":
            image_url = await get_waifu_pics_image(category, nsfw)
        elif api == "nekoslife":
            image_url = await get_nekos_life_image(category)
        elif api == "waifuim":
            image_url = await get_waifu_im_image(category, nsfw)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API: {api}")
            return None
        
        if image_url:
            return image_url
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await asyncio.sleep(0.5)
    
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def get_random_image(nsfw=False):
    # –í—ã–±–∏—Ä–∞–µ–º API
    apis = list(NSFW_CATEGORIES.keys()) if nsfw else ["waifupics"]
    random.shuffle(apis)
    
    for api in apis:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if nsfw:
            categories = NSFW_CATEGORIES[api]
        else:
            categories = SFW_CATEGORIES if api == "waifupics" else []
            
        random.shuffle(categories)
        
        for category in categories:
            image_url = await get_image(api, category, nsfw)
            if image_url:
                return image_url, api, category
    
    # –ï—Å–ª–∏ –≤—Å–µ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None, None, None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_main_menu_keyboard()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∏–º–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫.\n\n"
        "üîû –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç!", 
        reply_markup=reply_markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üå∏ SFW –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="menu_sfw")],
        [InlineKeyboardButton("üîû NSFW –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="menu_nsfw")],
        [InlineKeyboardButton("üåü –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="menu_advanced")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="random")],
        [InlineKeyboardButton("üî• –°–ª—É—á–∞–π–Ω–æ–µ NSFW", callback_data="random_nsfw")]
    ])

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è SFW –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_sfw_keyboard():
    keyboard = []
    row = []
    for i, category in enumerate(SFW_CATEGORIES):
        row.append(InlineKeyboardButton(category, callback_data=f"sfw_waifupics_{category}"))
        if len(row) == 3 or i == len(SFW_CATEGORIES) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è NSFW –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_nsfw_keyboard():
    keyboard = []
    row = []
    for i, category in enumerate(NSFW_CATEGORIES["waifupics"]):
        row.append(InlineKeyboardButton(category, callback_data=f"nsfw_waifupics_{category}"))
        if len(row) == 3 or i == len(NSFW_CATEGORIES["waifupics"]) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ API
def get_api_keyboard():
    keyboard = [
        [InlineKeyboardButton("Waifu.pics (4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", callback_data="api_waifupics")],
        # [InlineKeyboardButton("Nekos.life (2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", callback_data="api_nekoslife")],
        [InlineKeyboardButton("Waifu.im (13 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)", callback_data="api_waifuim")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API
def get_categories_keyboard(api_name):
    if api_name not in NSFW_CATEGORIES:
        return InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="menu_advanced")]])
    
    keyboard = []
    row = []
    for i, category in enumerate(NSFW_CATEGORIES[api_name]):
        row.append(InlineKeyboardButton(category, callback_data=f"nsfw_{api_name}_{category}"))
        if len(row) == 3 or i == len(NSFW_CATEGORIES[api_name]) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ API", callback_data="menu_advanced"),
        InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–µ–µ –∏ –Ω–∞–∑–∞–¥)
def get_image_keyboard(data_type, api, category):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ ‚è≠Ô∏è", callback_data=f"next_{data_type}_{api}_{category}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"back_to_{api}")],
        [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    else:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def process_random_image(update: Update, context: ContextTypes.DEFAULT_TYPE, nsfw=False):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if hasattr(update, 'callback_query') and update.callback_query:
        message = update.callback_query.message
    else:
        message = update.message
    
    wait_message = await message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    image_url, api, category = await get_random_image(nsfw=nsfw)
    
    if image_url:
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ ‚è≠Ô∏è", callback_data=f"random{'_nsfw' if nsfw else ''}")],
            [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await message.reply_photo(
            photo=image_url,
            caption=f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {api}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
            reply_markup=keyboard
        )
        await wait_message.delete()
    else:
        await wait_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def process_category_image(update: Update, context: ContextTypes.DEFAULT_TYPE, api, category, is_nsfw):
    if hasattr(update, 'callback_query') and update.callback_query:
        message = update.callback_query.message
    else:
        message = update.message
    
    wait_message = await message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: API={api}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category}, NSFW={is_nsfw}")
        image_url = await get_image(api, category, is_nsfw)
        
        if image_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ ‚è≠Ô∏è", callback_data=f"next_{is_nsfw and 'nsfw' or 'sfw'}_{api}_{category}")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"back_to_{api}")],
                [InlineKeyboardButton("¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await message.reply_photo(
                image_url, 
                caption=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
                reply_markup=keyboard
            )
            
            await wait_message.delete()
        else:
            await wait_message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_message)
        try:
            await wait_message.edit_text(error_message)
        except Exception as edit_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
    
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {data}")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    has_photo = query.message.photo is not None and len(query.message.photo) > 0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_main":
        await show_main_menu(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if data.startswith("menu_"):
        menu_type = data.split("_")[1]
        
        if menu_type == "sfw":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SFW –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ SFW –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_sfw_keyboard())
        elif menu_type == "nsfw":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º NSFW –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await query.message.reply_text("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: 18+ –∫–æ–Ω—Ç–µ–Ω—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ NSFW –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                          reply_markup=get_nsfw_keyboard())
        elif menu_type == "advanced":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä API
            await query.message.reply_text("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: 18+ –∫–æ–Ω—Ç–µ–Ω—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ API:", 
                                          reply_markup=get_api_keyboard())
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if data == "random":
        await process_random_image(update, context, nsfw=False)
        return
    
    if data == "random_nsfw":
        await process_random_image(update, context, nsfw=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ API
    if data.startswith("api_"):
        api_name = data.split("_")[1]
        logger.info(f"–í—ã–±—Ä–∞–Ω API: {api_name}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ {api_name}:", 
                                      reply_markup=get_categories_keyboard(api_name))
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    if data.startswith("back_to_"):
        api_name = data.split("_")[2]
        
        if api_name == "waifupics":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                                          reply_markup=get_nsfw_keyboard())
        else:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API
            await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ {api_name}:", 
                                          reply_markup=get_categories_keyboard(api_name))
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ" –¥–ª—è —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.startswith("next_"):
        parts = data.split("_", 3)[1:]  # next_nsfw_waifupics_waifu -> [nsfw, waifupics, waifu]
        if len(parts) == 3:
            type_img, api, category = parts
            is_nsfw = type_img == "nsfw"
            
            await process_category_image(update, context, api, category, is_nsfw)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (sfw_api_category –∏–ª–∏ nsfw_api_category)
    if data.startswith("sfw_") or data.startswith("nsfw_"):
        parts = data.split("_", 2)
        if len(parts) == 3:
            type_img, api, category = parts
            is_nsfw = type_img == "nsfw"
            
            await process_category_image(update, context, api, category, is_nsfw)
            return
    
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {data}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token("7749183289:AAG-4DV9aSpyoHJ8QBfoEZDFTaAyj2Re_fM").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_main_menu))
    app.add_handler(CallbackQueryHandler(button))
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ webhook –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
    app.run_webhook(
        listen="0.0.0.0",
        port=8443,
        webhook_url="https://botfotki-wd8u2eri.b4a.run/7749183289:AAG-4DV9aSpyoHJ8QBfoEZDFTaAyj2Re_fM"
    )

if __name__ == "__main__":
    main()

